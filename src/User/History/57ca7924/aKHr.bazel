load("@build_bazel_rules_nodejs//:index.bzl", "js_library")
load("//packages/infra/bazel/typescript:index.bzl", "ts_library_client")
load("//packages/infra/bazel/eslint:index.bzl", "eslint_test_client")
load("//packages/infra/bazel/jest:index.bzl", "jest_test_client")
load("//packages/infra/bazel/i18n:index.bzl", "extract_messages")
load("//packages/infra/bazel/semgrep:semgrep_index.bzl", "semgrep_test_frontend_react")

PKG_SRC_MATCH_RULES_TS = [
    "**/*.d.ts",
    "**/*.ts",
    "**/*.tsx",
]

PKG_MATCH_RULES_IGNORE = [
    "@hox/**",
]

PKG_DATA_MATCH_RULES = [
    "**/*.svg",
    "**/*.js",
    "**/*.json",
]

PKG_SRC_MATCH_RULES_TEST_TS = [
    "**/__tests__/**/*.ts",
    "**/__tests__/**/*.tsx",
    "**/*.test.ts",
    "**/*.test.tsx",
]

PKG_SRC_MATCH_RULES_STORIES_TS = [
    "**/*.stories.ts",
    "**/*.stories.tsx",
]

PKG_SRC_MATCH_RULES_TEST_NON_TS = [
    "**/*.snap",
]

PKG_SRC_MATCH_RULES_TEST_DATA = [
    "**/__mocks__/**/*.ts",
    "**/__mocks__/**/*.tsx",
]

PKG_SRCS_TS = glob(
    include = PKG_SRC_MATCH_RULES_TS,
    exclude = PKG_SRC_MATCH_RULES_TEST_TS + PKG_SRC_MATCH_RULES_TEST_NON_TS + PKG_SRC_MATCH_RULES_TEST_DATA + PKG_DATA_MATCH_RULES + PKG_MATCH_RULES_IGNORE + PKG_SRC_MATCH_RULES_STORIES_TS,
)

PKG_DATA = glob(
    include = PKG_DATA_MATCH_RULES,
    exclude = PKG_SRC_MATCH_RULES_TS + PKG_SRC_MATCH_RULES_TEST_TS + PKG_SRC_MATCH_RULES_TEST_NON_TS + PKG_SRC_MATCH_RULES_TEST_DATA + PKG_MATCH_RULES_IGNORE + PKG_SRC_MATCH_RULES_STORIES_TS,
)

PKG_TEST_SRCS_TS = glob(
    include = PKG_SRC_MATCH_RULES_TEST_TS,
    exclude = PKG_MATCH_RULES_IGNORE,
)

PKG_TEST_SRCS_NON_TS = glob(
    include = PKG_SRC_MATCH_RULES_TEST_NON_TS,
    exclude = PKG_MATCH_RULES_IGNORE,
)

PKG_TEST_SRCS = PKG_TEST_SRCS_TS + PKG_TEST_SRCS_NON_TS

PKG_TEST_DATA = glob(
    include = PKG_SRC_MATCH_RULES_TEST_DATA,
    exclude = PKG_MATCH_RULES_IGNORE,
)

PKG_DEPS = [
    "//packages/frontend/utils/src:tslib",
    "@npm//@juggle/resize-observer",
    "@npm//@nivo/core",
    "@npm//@nivo/line",
    "@npm//@storybook/addon-actions",
    "@npm//@storybook/addon-essentials",
    "@npm//@storybook/addon-links",
    "@npm//@storybook/react",
    "@npm//@types/body-scroll-lock",
    "@npm//@types/color",
    "@npm//@types/chroma-js",
    "@npm//@types/d3-ease",
    "@npm//@types/d3-shape",
    "@npm//@types/history",
    "@npm//@types/markdown-it",
    "@npm//@types/md5",
    "@npm//@types/ramda",
    "@npm//@types/react-dom",
    "@npm//@types/react-is",
    "@npm//@types/react-router-dom",
    "@npm//@types/react-window",
    "@npm//@types/react",
    "@npm//@types/styled-components",
    "@npm//@types/uuid",
    "@npm//@types/user-event",
    "@npm//body-scroll-lock",
    "@npm//case-sensitive-paths-webpack-plugin",
    "@npm//color",
    "@npm//country-flag-icons",
    "@npm//chroma-js",
    "@npm//constate",
    "@npm//d3-ease",
    "@npm//d3-shape",
    "@npm//downshift",
    "@npm//history",
    "@npm//identity-obj-proxy",
    "@npm//lerp",
    "@npm//lottie-web",
    "@npm//markdown-it",
    "@npm//md5",
    "@npm//ramda",
    "@npm//react-confetti-cannon",
    "@npm//react-dom",
    "@npm//react-intl",
    "@npm//react-is",
    "@npm//react-merge-refs",
    "@npm//react-router-dom",
    "@npm//react-spring",
    "@npm//react-table",
    "@npm//react-use-measure",
    "@npm//react-window",
    "@npm//react",
    "@npm//styled-components",
    "@npm//uuid",
    "@npm//victory",
    "@npm//react-use-gesture",
]

PKG_TEST_DEPS = []

MODULE_NAME = "@hox/ui"

ts_library_client(
    name = "tslib",
    srcs = PKG_SRCS_TS,
    module_name = MODULE_NAME,
    visibility = ["//visibility:public"],
    deps = PKG_DEPS,
)

js_library(
    name = "lib",
    package_name = MODULE_NAME,
    srcs = PKG_DATA + [":tslib"],
    visibility = ["//visibility:public"],
)

jest_test_client(
    name = "test",
    timeout = "moderate",
    srcs = PKG_TEST_SRCS,
    data = PKG_SRCS_TS + PKG_DATA + PKG_TEST_DATA,
    module_name = MODULE_NAME,
    visibility = ["//visibility:public"],
    deps = PKG_DEPS + PKG_TEST_DEPS,
)

eslint_test_client(
    name = "lint",
    timeout = "short",
    srcs = PKG_SRCS_TS + PKG_TEST_SRCS_TS,
    visibility = ["//visibility:public"],
    deps = PKG_DEPS + PKG_TEST_DEPS,
)

extract_messages(
    name = "extract_translation_messages",
    srcs = PKG_SRCS_TS,
    outs = [".tmp/translations/messages/messages.json"],
    config = "//packages/frontend/ui:.babelrc-translations",
    visibility = ["//visibility:public"],
)

semgrep_test_frontend_react(
    name = "semgrep_lint",
    srcs = PKG_SRCS_TS,
    visibility = ["//visibility:public"],
)
